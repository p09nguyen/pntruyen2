import React, { useState, useEffect } from 'react';
import { categoriesApi, Category } from '../../services/api';
import Toast from '../../components/Toast';
import './AdminCategories.css';

const AdminCategories: React.FC = () => {
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);
  const [formData, setFormData] = useState({
    names: '' // nhi·ªÅu t√™n, m·ªói d√≤ng 1 t√™n
  });
  const [showDeleteModal, setShowDeleteModal] = useState<{open: boolean, id?: number}>({open: false});
  const [toast, setToast] = useState<{message: string, type: 'success'|'error'|'info', isVisible: boolean}>({message: '', type: 'success', isVisible: false});
  // Ph√¢n trang
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const pageSize = 20;

  const showToast = (message: string, type: 'success'|'error'|'info' = 'success') => {
    setToast({ message, type, isVisible: true });
    setTimeout(() => setToast(t => ({...t, isVisible: false})), 2000);
  }

  useEffect(() => {
    loadCategories(currentPage);
    // eslint-disable-next-line
  }, [currentPage]);

  const loadCategories = async (page = 1) => {
    setLoading(true);
    try {
      const response = await categoriesApi.getAll(page, pageSize);
      if (response.data.success) {
        setCategories(response.data.data);
        setCurrentPage(response.data.pagination.page);
        setTotalPages(response.data.pagination.pages);
      }
    } catch (error) {
      console.error('Error loading categories:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  if (editingCategory) {
    // TODO: Implement update API
    console.log('Update category:', editingCategory.id, formData);
    return;
  }
  // Th√™m nhi·ªÅu th·ªÉ lo·∫°i c√πng l√∫c
  const names = formData.names.split('\n').map(n => n.trim()).filter(n => n);
  if (names.length === 0) return;
  let success = 0, fail = 0;
  for (const name of names) {
    try {
      const response = await categoriesApi.create({ name });
      if (response.data.success) success++;
      else fail++;
    } catch {
      fail++;
    }
  }
  loadCategories(1);
  setShowModal(false);
  setFormData({ names: '' });
  if (success > 0) showToast(`ƒê√£ th√™m ${success} th·ªÉ lo·∫°i!`, 'success');
  if (fail > 0) showToast(`${fail} th·ªÉ lo·∫°i b·ªã l·ªói!`, 'error');
};

  const handleEdit = (category: Category) => {
    setEditingCategory(category);
    setFormData({ names: category.name });
    setShowModal(true);
  };

  const handleDelete = async (id: number) => {
  try {
    const response = await categoriesApi.delete(id);
    if (response.data.success) {
      // N·∫øu x√≥a h·∫øt trang hi·ªán t·∫°i th√¨ l√πi v·ªÅ trang tr∆∞·ªõc n·∫øu c√≥
      if (categories.length === 1 && currentPage > 1) {
        setCurrentPage(currentPage - 1);
      } else {
        loadCategories(currentPage);
      }
      showToast('ƒê√£ x√≥a th·ªÉ lo·∫°i!', 'success');
    } else {
      showToast('X√≥a th·∫•t b·∫°i: ' + (response.data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'), 'error');
    }
  } catch (error) {
    console.error('Error deleting category:', error);
    showToast('C√≥ l·ªói x·∫£y ra khi x√≥a!', 'error');
  }
  setShowDeleteModal({open: false});
};

  const openAddModal = () => {
    setEditingCategory(null);
    setFormData({ names: '' });
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setEditingCategory(null);
    setFormData({ names: '' });
  };

  return (
    <div className="admin-categories">
      <div className="page-header">
        <h1 className="page-title">üè∑Ô∏è Qu·∫£n l√Ω th·ªÉ lo·∫°i</h1>
        <div className="page-actions">
          <button onClick={openAddModal} className="btn-admin btn-primary">
            ‚ûï Th√™m th·ªÉ lo·∫°i
          </button>
        </div>
      </div>

      <div className="admin-card">
        {loading ? (
          <div className="loading">
            <div className="spinner"></div>
            <p>ƒêang t·∫£i danh s√°ch th·ªÉ lo·∫°i...</p>
          </div>
        ) : (
          <>
          <div className="categories-grid">
            {categories.length === 0 ? (
              <div className="no-data">
                <p>Ch∆∞a c√≥ th·ªÉ lo·∫°i n√†o.</p>
              </div>
            ) : (
              categories.map(category => (
                <div key={category.id} className="category-card">
                  <div className="category-info">
                    <h3>{category.name}</h3>
                    <p className="category-slug">/{category.slug}</p>
                    <p className="category-date">
                      T·∫°o: {new Date(category.created_at).toLocaleString('vi-VN', {hour:'2-digit',minute:'2-digit',hour12:false,day:'2-digit',month:'2-digit',year:'numeric'})}
                    </p>
                  </div>
                  <div className="category-actions">
                    <button
                      onClick={() => handleEdit(category)}
                      className="btn-admin btn-warning btn-sm"
                    >
                      ‚úèÔ∏è S·ª≠a
                    </button>
                    <button
                      onClick={() => setShowDeleteModal({open: true, id: category.id})}
                      className="btn-admin btn-danger btn-sm"
                    >
                      üóëÔ∏è X√≥a
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
          {/* Pagination controls */}
          <div className="pagination-controls" style={{marginTop: 24, display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 16}}>
            <button
              className="btn-admin btn-secondary"
              onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
              disabled={currentPage === 1}
            >
              ‚Üê Trang tr∆∞·ªõc
            </button>
            <span style={{minWidth: 80}}>
              Trang {currentPage} / {totalPages}
            </span>
            <button
              className="btn-admin btn-secondary"
              onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
              disabled={currentPage === totalPages}
            >
              Trang sau ‚Üí
            </button>
          </div>
          </>
        )}
      </div>

      {/* Modal */}
      {showModal && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>
                {editingCategory ? '‚úèÔ∏è Ch·ªânh s·ª≠a th·ªÉ lo·∫°i' : '‚ûï Th√™m th·ªÉ lo·∫°i m·ªõi'}
              </h2>
              <button onClick={closeModal} className="modal-close">‚úï</button>
            </div>

            <form onSubmit={handleSubmit} className="modal-form">
  <div className="form-group">
    <label htmlFor="names">T√™n th·ªÉ lo·∫°i (c√≥ th·ªÉ nh·∫≠p nhi·ªÅu, m·ªói d√≤ng 1 t√™n)</label>
    <textarea
      id="names"
      value={formData.names}
      onChange={(e) => setFormData({ ...formData, names: e.target.value })}
      required
      placeholder="V√≠ d·ª•:\nKi·∫øm hi·ªáp\nNg√¥n t√¨nh\nTrinh th√°m"
      className="form-input"
      rows={5}
    />
  </div>

              <div className="modal-actions">
                <button type="button" onClick={closeModal} className="btn-admin btn-secondary">
                  H·ªßy
                </button>
                <button type="submit" className="btn-admin btn-primary">
                  {editingCategory ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    {/* X√°c nh·∫≠n x√≥a */}
    {showDeleteModal.open && (
      <div className="modal-overlay" onClick={() => setShowDeleteModal({open: false})}>
        <div className="modal-content" onClick={e => e.stopPropagation()}>
          <div className="modal-header">
            <h2>X√°c nh·∫≠n x√≥a</h2>
            <button onClick={() => setShowDeleteModal({open: false})} className="modal-close">‚úï</button>
          </div>
          <div style={{padding: '16px 0', textAlign: 'center'}}>
            <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·ªÉ lo·∫°i n√†y kh√¥ng?</p>
          </div>
          <div className="modal-actions">
            <button className="btn-admin btn-secondary" onClick={() => setShowDeleteModal({open: false})}>H·ªßy</button>
            <button className="btn-admin btn-danger" onClick={() => handleDelete(showDeleteModal.id!)}>X√≥a</button>
          </div>
        </div>
      </div>
    )}

    {/* Toast notification */}
    <Toast
      message={toast.message}
      type={toast.type}
      isVisible={toast.isVisible}
      onClose={() => setToast(t => ({...t, isVisible: false}))}
    />
  </div>
  );
};

export default AdminCategories;
